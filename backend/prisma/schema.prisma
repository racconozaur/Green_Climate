// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  is_admin   Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz()
  updated_at DateTime? @updatedAt @db.Timestamptz()

  posts    Post[]
  sessions UserSession[]
  comments PostComment[]

  @@map("user")
}

model UserSession {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz()

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_session")
}

model Post {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  title      String    @db.VarChar(255)
  body       String    @db.Text
  created_at DateTime  @default(now()) @db.Timestamptz()
  updated_at DateTime? @updatedAt @db.Timestamptz()

  user     User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  images   PostImage[]
  comments PostComment[]

  @@map("post")
}

model PostImage {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post_id    String   @db.Uuid
  order      Int
  name       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamptz()

  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("post_image")
}

model PostComment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post_id    String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz()
  comment    String   @db.Text

  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("post_comment")
}
